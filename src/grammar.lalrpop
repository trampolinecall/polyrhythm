use std::str::FromStr;
use lalrpop_util::ParseError;
use crate::{
    parse::RhythmError,
    polyrhythm::{Polyrhythm, RhythmLine},
    rhythm::{NoteDuration, NoteDurationKind, Rhythm, RhythmSegment},
};

grammar;

extern {
    type Error = RhythmError;
}

pub Polyrhythm: Polyrhythm =
    <tempo: ("tempo" <NoteDuration> "=" <Number> ";")>
    <pulse: ("pulse" <Rhythm> ";")?>
    <rhythms: RhythmLine+> => Polyrhythm { tempo, pulse, rhythms };

RhythmLine: RhythmLine =
    <original: Rhythm> <approx:("approx" <Rhythm>)*> ";" => RhythmLine { original, approximations: approx };

Rhythm: Rhythm = <RhythmSegment> => Rhythm { segments: <> };

RhythmSegment: Vec<RhythmSegment> = {
    <NoteDuration> => vec![RhythmSegment::Note(<>)],
    <mut durs:(<NoteDuration> "~")+> <last:NoteDuration> => {
        durs.push(last);
        vec![RhythmSegment::TiedNote(durs)]
    },
    "r" <NoteDuration> => vec![RhythmSegment::Rest(<>)],
    "rep" <reps:Number> <rhy:RhythmSegment> => std::iter::repeat(rhy).take(reps as usize).flatten().collect(),
    "tuplet" <Number> "/" <Number> "(" <NoteDuration> ")" <Rhythm> =>? Ok(vec![RhythmSegment::new_tuplet(<>).map_err(|e| ParseError::User { error: e.into() })?]),
    "{" <RhythmSegment+> "}" => <>.into_iter().flatten().collect(),
}

NoteDuration: NoteDuration =
    <num:Number> <dot:"."?> =>? Ok(NoteDuration {
        kind: NoteDurationKind::from_number(num).ok_or(ParseError::User { error: RhythmError::InvalidNoteDuration(num) })?,
        dotted: dot.is_some(),
    });

Number: u32 = r"[0-9]+" => u32::from_str(<>).unwrap();
