use std::str::FromStr;
use lalrpop_util::ParseError;
use crate::{
    parse::RhythmError,
    polyrhythm::Polyrhythm,
    rhythm::{NoteDuration, NoteDurationKind, Rhythm, RhythmSegment},
};

grammar;

extern {
    type Error = RhythmError;
}

pub Polyrhythm: Polyrhythm =
    <rhythms:(<Rhythm> ";")+> => Polyrhythm { rhythms };

Rhythm: Rhythm = {
    <RhythmSegment> => Rhythm { segments: vec![<>] },
    "{" <RhythmSegment+> "}" => Rhythm { segments: <> },
};

RhythmSegment: RhythmSegment = {
    <NoteDuration> => RhythmSegment::Note(<>),
    "r" <NoteDuration> => RhythmSegment::Rest(<>),
    "tuplet" <Number> "/" <Number> "(" <NoteDuration> ")" <Rhythm> =>? RhythmSegment::new_tuplet(<>).map_err(|e| ParseError::User { error: e.into() }),
}

NoteDuration: NoteDuration =
    <num:Number> <dot:"."?> =>? {
        let dotted = dot.is_some();

        Ok(NoteDuration {
            kind: NoteDurationKind::from_number(num).ok_or(ParseError::User { error: RhythmError::InvalidNoteDuration(num) })?
            // TODO: add dotted
        })
    };

Number: u32 = r"[0-9]+" => u32::from_str(<>).unwrap();
